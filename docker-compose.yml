version: '3.8'
networks:
  kong-net:
    driver: bridge

services:
  kafka:
    networks:
      - kong-net
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@localhost:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_KRAFT_CLUSTER_ID: kraft-cluster
      KAFKA__BOOTSTRAP_SERVERS=kafka: 9092
      ALLOW_PLAINTEXT_LISTENER: yes
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-topic-creator:
    build:
      context: ./infrastructure/kafka
    depends_on:
      - kafka
    networks:
      - kong-net
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092

  kong-database:
    image: postgres:13
    platform: linux/arm64/v8
    networks:
      - kong-net
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong -d kong"]
      interval: 5s
      retries: 5
    volumes:
      - kong-db-data:/var/lib/postgresql/data

  kong-bootstrap:
    image: kong:3.9.1
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    restart: "on-failure"
    depends_on:
      kong-database:
        condition: service_healthy
  kong-migrations:
    image: kong:3.9.1
    depends_on:
      - kong-bootstrap
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kong
      KONG_PG_USER: kong
      KONG_PG_DATABASE: kong
    command: >
      sh -c "kong migrations up  && kong migrations finish"
    restart: "on-failure"

  # This is only applicable with Kong enterprise mode
  # Uncomment if you want to use Kong Enterprise with declarative configuration
  # kong-import:
  #   image: kong:3.9.1
  #   depends_on:
  #     - kong-database
  #   networks:
  #     - kong-net
  #   volumes:
  #     - ./infrastructure/api-gateway/kong.yml:/kong.yml:ro
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: kong-database
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: kong
  #     KONG_PG_DATABASE: kong
  #   command: kong config db_import /kong.yml

  kong:
    image: kong:3.9.1
    platform: linux/arm64/v8
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    volumes:
      - ./infrastructure/api-gateway/kong.yml:/kong/declarative/kong.yml:ro
    depends_on:
      - kong-database
      - kong-migrations
    command: ["kong", "start"]
    ports:
      - "8000:8000"   # Kong proxy (HTTP)
      - "8443:8443"   # Kong proxy (HTTPS)
      - "8001:8001"   # Kong Admin API (HTTP)
      - "8444:8444"   # Kong Admin API (HTTPS)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/status"]
      interval: 10s
      timeout: 5s
      retries: 5

  product-api:
    networks:
      - kong-net
    build:
      context: ./ProductApi
    ports:
      - "5001:8080"
    depends_on:
      - kafka
      - otel-collector
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      Kafka__BootstrapServers: kafka:9092
      Kafka__Topic: product-events

  kong-init:
    build:
      context: ./infrastructure/api-gateway
    depends_on:
      - kong
    networks:
      - kong-net



  # Order API (exposes REST endpoints)
  order-api:
    networks:
      - kong-net
    build:
      context: ./OrderApi
    ports:
      - "5005:8080"
    depends_on:
      - postgres
      - kafka
      - otel-collector
    environment:
      ConnectionStrings__OrderDb: Host=postgres;Port=5432;Database=orderdb;Username=orderuser;Password=orderpass
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317

  order-service:
    networks:
      - kong-net
    build:
      context: ./OrderService
    depends_on:
      - kafka
      - postgres
      - otel-collector
    environment:
      ConnectionStrings__OrderDb: Host=postgres;Port=5432;Database=orderdb;Username=orderuser;Password=orderpass
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      
  postgres:
    networks:
      - kong-net
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: orderuser
      POSTGRES_PASSWORD: orderpass
      POSTGRES_DB: orderdb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orderuser -d orderdb"]
      interval: 5s
      timeout: 5s
      retries: 5

# Jaeger (for distributed tracing)      
  jaeger:
    networks:
      - kong-net
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "6831:6831/udp"

# Prometheus (for metrics scraping)
  prometheus:
    networks:
      - kong-net
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  # Grafana (for dashboards)
  grafana:
    networks:
      - kong-net
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning

  # OpenTelemetry Collector
  otel-collector:
    networks:
      - kong-net
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "8889:8889"  # Prometheus scrape endpoint
    depends_on:
      - jaeger
      - prometheus

volumes:
  pgdata:
  kafka_data:
  grafana_data:
  kong-db-data: