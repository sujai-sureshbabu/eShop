version: '3.8'

services:
  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@localhost:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_KRAFT_CLUSTER_ID: kraft-cluster
      ALLOW_PLAINTEXT_LISTENER: yes

  kafka-init:
    image: bitnami/kafka:latest
    depends_on:
      - kafka
    entrypoint: >
      bash -c "
        sleep 10 &&
        kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic product-events --partitions 1 --replication-factor 1
      "

  product-api:
    build:
      context: ./ProductApi
    ports:
      - "5001:8080"
    depends_on:
      - kafka
      - otel-collector
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      Kafka__BootstrapServers: kafka:9092
      Kafka__Topic: product-events

  # Order API (exposes REST endpoints)
  order-api:
    build:
      context: ./OrderApi
    ports:
      - "5005:8080"
    depends_on:
      - postgres
      - kafka
      - otel-collector
    environment:
      ConnectionStrings__OrderDb: Host=postgres;Port=5432;Database=orderdb;Username=orderuser;Password=orderpass
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317

  order-service:
    build:
      context: ./OrderService
    depends_on:
      - kafka
      - postgres
      - otel-collector
    environment:
      ConnectionStrings__OrderDb: Host=postgres;Port=5432;Database=orderdb;Username=orderuser;Password=orderpass
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      
  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: orderuser
      POSTGRES_PASSWORD: orderpass
      POSTGRES_DB: orderdb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orderuser -d orderdb"]
      interval: 5s
      timeout: 5s
      retries: 5

# Jaeger (for distributed tracing)      
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "6831:6831/udp"

# Prometheus (for metrics scraping)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  # Grafana (for dashboards)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "8889:8889"  # Prometheus scrape endpoint
    depends_on:
      - jaeger
      - prometheus

volumes:
  pgdata:
  kafka_data:
  grafana_data:
